name: Get Job Id
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        os: [ 'self-hosted' ]
        order: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Get this job's run ID"
        id: get-job-id
        uses: actions/github-script@v6
        with:
          script: |
            const getJobId = async() => {
              const result = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                per_page: 100,
              });
              const currentJobs = result.data.jobs.
                filter(it => it.status === 'in_progress' && it.runner_name === process.env.RUNNER_NAME);
              if (currentJobs && currentJobs.length) {
                return currentJobs[0].id;
              }
              return null;
            }
            for (let i = 0; i < 10; i++) {
              const currentJobId = await getJobId();
              if (currentJobId) {
                console.log("Current job id:", currentJobId);
                return currentJobId;
              }
              await new Promise(r => setTimeout(r, 1000));
            }
      - name: "My job ID is ${{steps.get-job-id.outputs.result}}"
        run: >
          echo "get-job-id=${{steps.get-job-id.outputs.result}}"
      - name: "Runner name"
        id: runner-name
        uses: actions/github-script@v6
        with:
          script: |
            console.log(process.env.RUNNER_NAME)

  build2:
    strategy:
      matrix:
        os: [ 'self-hosted' ]
        order: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Get this job's run ID"
        id: get-job-id
        uses: actions/github-script@v6
        with:
          script: |
            const getJobId = async() => {
              const result = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                per_page: 100,
              });
              const currentJobs = result.data.jobs.
                filter(it => it.status === 'in_progress' && it.runner_name === process.env.RUNNER_NAME);
              if (currentJobs && currentJobs.length) {
                return currentJobs[0].id;
              }
              return null;
            }
            for (let i = 0; i < 10; i++) {
              const currentJobId = await getJobId();
              if (currentJobId) {
                console.log("Current job id:", currentJobId);
                return currentJobId;
              }
              await new Promise(r => setTimeout(r, 1000));
            }
      - name: "My job ID is ${{steps.get-job-id.outputs.result}}"
        run: >
          echo "get-job-id=${{steps.get-job-id.outputs.result}}"
      - name: "Runner name"
        id: runner-name
        uses: actions/github-script@v6
        with:
          script: |
            console.log(process.env.RUNNER_NAME)

  use-other-job-id:
    name: Use other job
    runs-on: ubuntu-latest
    steps:
      - name: "Get this job's run ID"
        id: get-job-id
        uses: actions/github-script@v6
        with:
          script: |
            const getJobId = async() => {
              const result = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                per_page: 100,
              });
              const currentJobs = result.data.jobs.
                filter(it => it.status === 'in_progress' && it.runner_name === process.env.RUNNER_NAME);
              if (currentJobs && currentJobs.length) {
                return currentJobs[0].id;
              }
              return null;
            }
            for (let i = 0; i < 10; i++) {
              const currentJobId = await getJobId();
              if (currentJobId) {
                console.log("Current job id:", currentJobId);
                return currentJobId;
              }
              await new Promise(r => setTimeout(r, 1000));
            }
      - name: "My job ID is ${{steps.get-job-id.outputs.result}}"
        run: >
          echo "get-job-id=${{steps.get-job-id.outputs.result}}"
      - name: "Runner name"
        id: runner-name
        uses: actions/github-script@v6
        with:
          script: |
            console.log(process.env.RUNNER_NAME)

  use-another-job-id:
    name: Use another job
    runs-on: ubuntu-latest
    steps:
      - name: "Get this job's run ID"
        id: get-job-id
        uses: actions/github-script@v6
        with:
          script: |
            const getJobId = async() => {
              const result = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                per_page: 100,
              });
              const currentJobs = result.data.jobs.
                filter(it => it.status === 'in_progress' && it.runner_name === process.env.RUNNER_NAME);
              if (currentJobs && currentJobs.length) {
                return currentJobs[0].id;
              }
              return null;
            }
            for (let i = 0; i < 10; i++) {
              const currentJobId = await getJobId();
              if (currentJobId) {
                console.log("Current job id:", currentJobId);
                return currentJobId;
              }
              await new Promise(r => setTimeout(r, 1000));
            }
      - name: "My job ID is ${{steps.get-job-id.outputs.result}}"
        run: >
          echo "get-job-id=${{steps.get-job-id.outputs.result}}"
      - name: "Runner name"
        id: runner-name
        uses: actions/github-script@v6
        with:
          script: |
            console.log(process.env.RUNNER_NAME)            
